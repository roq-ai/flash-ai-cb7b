generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model exam {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  date       DateTime @db.Date
  student_id String   @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  student    student  @relation(fields: [student_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model flashcard {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  content    String   @db.VarChar(255)
  student_id String   @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  student    student  @relation(fields: [student_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model performance {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  score      Int
  student_id String   @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  student    student  @relation(fields: [student_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model student {
  id                 String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description        String?              @db.VarChar(255)
  image              String?              @db.VarChar(255)
  name               String               @db.VarChar(255)
  created_at         DateTime             @default(now()) @db.Timestamp(6)
  updated_at         DateTime             @default(now()) @db.Timestamp(6)
  user_id            String               @db.Uuid
  tenant_id          String               @db.VarChar(255)
  exam               exam[]
  flashcard          flashcard[]
  performance        performance[]
  user               user                 @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  study_group        study_group[]
  study_group_member study_group_member[]
}

model study_group {
  id                 String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name               String               @db.VarChar(255)
  admin_id           String               @db.Uuid
  created_at         DateTime             @default(now()) @db.Timestamp(6)
  updated_at         DateTime             @default(now()) @db.Timestamp(6)
  student            student              @relation(fields: [admin_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  study_group_member study_group_member[]
}

model study_group_member {
  id             String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  student_id     String      @db.Uuid
  study_group_id String      @db.Uuid
  created_at     DateTime    @default(now()) @db.Timestamp(6)
  updated_at     DateTime    @default(now()) @db.Timestamp(6)
  student        student     @relation(fields: [student_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  study_group    study_group @relation(fields: [study_group_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email       String    @unique @db.VarChar(255)
  firstName   String?   @db.VarChar(255)
  lastName    String?   @db.VarChar(255)
  roq_user_id String    @db.VarChar(255)
  tenant_id   String    @db.VarChar(255)
  created_at  DateTime  @default(now()) @db.Timestamp(6)
  updated_at  DateTime  @default(now()) @db.Timestamp(6)
  student     student[]
}
